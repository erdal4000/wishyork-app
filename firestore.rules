rules_version = '2';

function isOwner(wishlistId) {
  return get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId == request.auth.uid;
}

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /usernames/{username} {
        allow read: if true;
        allow create: if request.auth != null;
        allow delete: if request.auth != null;
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.authorId == request.auth.uid;

      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null && resource.data.authorId == request.auth.uid;
        allow delete: if request.auth != null && (resource.data.authorId == request.auth.uid || get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid);
      }
    }

    match /wishlists/{wishlistId} {
      allow create: if request.auth != null;
      allow read: if resource.data.privacy == 'public' || (request.auth != null && resource.data.authorId == request.auth.uid);
      allow update, delete: if request.auth != null && resource.data.authorId == request.auth.uid;
    }

    match /wishlists/{wishlistId}/items/{itemId} {
      allow read: if true;
      allow create: if request.auth != null && isOwner(wishlistId);
      allow delete: if request.auth != null && isOwner(wishlistId);

      allow update: if request.auth != null && (
        // Case 1: The user is the owner of the wishlist, they can do anything.
        isOwner(wishlistId) ||

        // Case 2: The list is public, so a logged-in visitor can perform specific actions.
        (get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public' &&
          (
            // Action A: Reserving an item (status, reservedBy, reservedById)
            (request.resource.data.diff(resource.data).affectedKeys().size() == 3 &&
              'status' in request.resource.data.diff(resource.data).affectedKeys() &&
              'reservedBy' in request.resource.data.diff(resource.data).affectedKeys() &&
              'reservedById' in request.resource.data.diff(resource.data).affectedKeys()
            ) ||
            // Action B: Marking as purchased (only status)
            (request.resource.data.diff(resource.data).affectedKeys().size() == 1 &&
              'status' in request.resource.data.diff(resource.data).affectedKeys() &&
              request.resource.data.status == 'fulfilled'
            )
          )
        )
      );
    }
  }
}
