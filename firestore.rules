rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow update: if isOwner(userId);
      
      // Bookmarks Subcollection
      match /bookmarks/{bookmarkId} {
        // Allow a user to read (get, list) and delete from their own bookmarks
        allow get, list, delete: if isOwner(userId);
        // A user cannot create or update bookmarks directly through this rule,
        // it must be done via a server-side function if needed for security.
        // For now, let's assume client-side creation for simplicity but this is a security consideration.
        allow create: if isOwner(userId);
      }
    }

    // Usernames Collection (for ensuring unique usernames)
    match /usernames/{username} {
      allow read: if isAuthenticated();
      allow create, delete: if isAuthenticated(); // More specific rules might be needed
    }

    // Posts Collection
    match /posts/{postId} {
      // Anyone can read a post if it exists, or if it's referenced in their bookmarks
      allow read: if true || exists(/databases/$(database)/documents/users/$(request.auth.uid)/bookmarks/$(postId));
      
      // Allow create if user is authenticated and the authorId matches their UID
      allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;

      // Allow update/delete only for the owner of the post
      allow update, delete: if isOwner(resource.data.authorId);
      
      // Comments Subcollection within Posts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isOwner(resource.data.authorId);
      }
    }

    // Wishlists Collection
    match /wishlists/{wishlistId} {
      // Read access based on privacy settings
      allow read: if resource.data.privacy == 'public'
                  || (resource.data.privacy == 'friends' && resource.data.authorId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following)
                  || isOwner(resource.data.authorId)
                  || exists(/databases/$(database)/documents/users/$(request.auth.uid)/bookmarks/$(wishlistId));

      // Allow create if user is authenticated and authorId matches
      allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
      
      // Allow update/delete only for the owner
      allow update, delete: if isOwner(resource.data.authorId);
      
      // Items Subcollection within Wishlists
      match /items/{itemId} {
        // Inherits read access from parent wishlist
        allow read: if get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public' 
                    || isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
        
        // Allow create/update/delete only for the owner of the wishlist
        allow write: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
      }
      
      // Comments Subcollection within Wishlists
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isOwner(resource.data.authorId);
      }
    }
  }
}