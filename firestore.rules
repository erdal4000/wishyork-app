rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth.uid != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // --- COLLECTION GROUP & BROAD READ RULES ---

    match /{path=**}/posts/{postId} {
      allow list, get: if isSignedIn();
      allow create: if isOwner(request.resource.data.authorId);
      allow update, delete: if isOwner(resource.data.authorId);
    }

    match /{path=**}/wishlists/{wishlistId} {
      allow list: if isSignedIn();
      allow get: if resource.data.privacy == 'public' || isOwner(resource.data.authorId);
      allow create: if isOwner(request.resource.data.authorId);
      allow update, delete: if isOwner(resource.data.authorId);
    }

    // --- DIRECT DOCUMENT RULES ---

    match /users/{userId} {
      // Allow any signed-in user to read user data.
      allow list, get: if isSignedIn();

      // Allow a user to update their own document, EXCEPT for follower/following counts.
      allow update: if isOwner(userId) || 
                     (isSignedIn() && 
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['followersCount', 'followingCount']));
      
      // Allow a user to create and delete their OWN user document.
      allow create, delete: if isOwner(userId);
    }

    match /usernames/{username} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.uid);
      // Deleting usernames is handled via a batched write in the profile update logic
      allow delete: if isSignedIn();
    }

    // --- SUB-COLLECTION RULES for direct access ---

    match /users/{userId}/bookmarks/{bookmarkId} {
        allow read, create, delete: if isOwner(userId);
    }

    match /wishlists/{wishlistId}/items/{itemId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
    }

    match /wishlists/{wishlistId}/comments/{commentId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.authorId);
    }

    match /posts/{postId}/comments/{commentId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.authorId);
    }
  }
}
