
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // CORRECTED: 'in' operator must be used to check for presence in an array.
    function isFollowing(profileUserId) {
      return profileUserId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following;
    }

    // --- Collection: users ---
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Users should not be deletable for now
      
      match /bookmarks/{bookmarkId} {
        allow read, write, delete: if isOwner(userId);
      }
    }

    // --- Collection: usernames (for uniqueness check) ---
    match /usernames/{username} {
      allow read: if true;
      allow create: if isSignedIn();
      allow delete: if isOwner(get(/databases/$(database)/documents/usernames/$(username)).data.uid);
    }

    // --- Collection Group: wishlists ---
    match /{path=**}/wishlists/{wishlistId} {
      // General read rule for direct access to a document.
      // This is what makes profile pages, home feed, etc. work.
      allow get: if 
          resource.data.privacy == 'public' || 
          isOwner(resource.data.authorId) ||
          (resource.data.privacy == 'friends' && isFollowing(resource.data.authorId));

      // General list rule for queries (like global search).
      allow list: if isSignedIn() && request.query.offset == 0 && request.query.limit <= 10;
      
      allow create: if isSignedIn();

      allow update: if 
          isOwner(resource.data.authorId) || 
          (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'commentCount', 'saves']));
          
      allow delete: if isOwner(resource.data.authorId);

      // --- Subcollection: items ---
      match /items/{itemId} {
        allow read, list: if 
          get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public' ||
          isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId) ||
          (get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'friends' && isFollowing(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId));
        
        allow create, delete: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
        
        allow update: if 
            isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId) ||
            (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'reservedBy']));
      }

      // --- Subcollection: comments ---
      match /comments/{commentId} {
        allow read, list: if 
          get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public' ||
          isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId) ||
          (get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'friends' && isFollowing(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId));

        allow create: if isSignedIn();
        allow update, delete: if isOwner(resource.data.authorId);
      }
    }
    
     // --- Collection Group: posts ---
    match /{path=**}/posts/{postId} {
        allow read, list: if isSignedIn();
        allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
        allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);

        match /comments/{commentId} {
            allow read, list: if isSignedIn();
            allow create: if isSignedIn();
            allow update, delete: if isOwner(resource.data.authorId);
        }
    }
  }
}
