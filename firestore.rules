rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isPublic(wishlistId) {
      return get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public';
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }

    // Rules for 'usernames' collection
    match /usernames/{username} {
      allow read;
      allow create: if request.auth != null;
    }

    // Rules for 'posts' collection
    match /posts/{postId} {
      allow read;
      allow create: if isOwner(request.resource.data.authorId);
      allow update, delete: if isOwner(resource.data.authorId);

      // Comments subcollection
      match /comments/{commentId} {
        allow read;
        allow create: if request.auth != null;
        allow update: if isOwner(resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/posts/$(postId)).data.authorId);
      }
    }

    // Rules for 'wishlists' collection
    match /wishlists/{wishlistId} {
      allow create: if isOwner(request.resource.data.authorId);
      allow read: if resource.data.privacy == 'public' || isOwner(resource.data.authorId);
      allow update, delete: if isOwner(resource.data.authorId);

      // Comments subcollection for wishlists
      match /comments/{commentId} {
        allow read;
        allow create: if request.auth != null;
        allow update: if isOwner(resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
      }
    }
    
    // Standalone rules for 'items' subcollection across all 'wishlists'
    match /wishlists/{wishlistId}/items/{itemId} {
      allow read;
      allow create: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
      allow delete: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);

      allow update: if request.auth != null && (
        // Allow owner to update everything
        get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId == request.auth.uid ||
        (
          // Allow others to update only specific fields if the list is public
          get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public' &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'reservedBy', 'reservedById'])
        )
      );
    }
  }
}
