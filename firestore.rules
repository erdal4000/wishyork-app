
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      // Anyone can read a user's public profile data
      allow read;
      // Only the owner can write to their own user document
      allow write: if isOwner(userId);
    }
    
    // Usernames Collection (for ensuring unique usernames)
    match /usernames/{username} {
      // Anyone can check if a username exists
      allow read;
      // Only an authenticated user can create a username document for themselves
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      // Nobody can update an existing username document
      allow update: if false;
      // Only the owner can delete their username document
      allow delete: if isAuthenticated() && resource.data.uid == request.auth.uid;
    }
    
    // Reports Collection
    match /reports/{reportId} {
        allow create: if isAuthenticated();
        allow read, write: if false; // Only admins should read/write
    }

    // Wishlists Collection
    match /wishlists/{wishlistId} {
      // READ Rules:
      // 1. Allow if the wishlist is public.
      // 2. Allow if the user is the owner of the wishlist.
      // 3. (Future) Allow if privacy is 'friends' and users are friends.
      allow read: if resource.data.privacy == 'public' || isOwner(resource.data.authorId);
      
      // CREATE Rule:
      // Only an authenticated user can create a wishlist for themselves.
      allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
      
      // UPDATE/DELETE Rules:
      // Only the owner of the wishlist can update or delete it.
      allow update, delete: if isOwner(resource.data.authorId);

      // Items Subcollection
      match /items/{itemId} {
        allow read, write: if true; // Temporarily open for development, will be secured later.
      }
      
      // Comments Subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isOwner(get(/databases/$(database)/documents/comments/$(commentId)).data.authorId);
      }
    }
    
    // Posts Collection
    match /posts/{postId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if isOwner(resource.data.authorId);
        
        // Comments Subcollection within Posts
        match /comments/{commentId} {
            allow read: if true;
            allow create: if isAuthenticated();
            allow update, delete: if isOwner(get(/databases/$(database)/documents/posts/$(postId)/comments/$(commentId)).data.authorId);
        }
    }
  }
}
