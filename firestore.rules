
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      // Users can read their own profile, create a profile, and update their own profile.
      allow read, update: if isOwner(userId);
      allow create: if request.auth != null;
    }

    // Rules for 'usernames' collection
    match /usernames/{username} {
      // Anyone can check if a username exists.
      allow get;
      // Only authenticated users can claim a username (done via signup).
      allow create: if request.auth != null;
      // Only the owner can release their username.
      allow delete: if isOwner(resource.data.uid);
    }
    
    // Rules for 'wishlists' collection
    match /wishlists/{wishlistId} {
      // Read a single wishlist if it's public or you are the owner.
      allow get: if isOwner(resource.data.authorId) || resource.data.privacy == 'public';
      // Query a list of wishlists if you are the owner or if you are querying for public lists.
      allow list: if (request.auth != null && request.query.where.size() > 0 && request.query.where[0][1] == 'authorId') || (request.query.where.size() > 0 && request.query.where[0][1] == 'privacy' && request.query.where[0][2] == 'public');
      // Create, update, delete only if you are the owner.
      allow create, update, delete: if isOwner(request.resource.data.authorId);

      // Sub-collection rules
      match /items/{itemId} {
        // Anyone can read items in a public wishlist. Owners can read any item in their list.
        allow read: if get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public' || isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
        // Only the wishlist owner can create and delete items.
        allow create, delete: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
        // Any authenticated user can update an item (for reserving/fulfilling).
        // Specific logic is handled in the UI.
        allow update: if request.auth != null;
      }
      
       match /comments/{commentId} {
        // Authenticated users can read all comments.
        allow read: if request.auth != null;
        // Authenticated users can create comments.
        allow create: if request.auth != null;
        // Only the author of the comment can update or delete it.
        allow update, delete: if isOwner(resource.data.authorId);
      }
    }

    // Rules for 'posts' collection
    match /posts/{postId} {
        // Any authenticated user can read any post.
        allow read: if request.auth != null;
        // Users can only create posts for themselves.
        allow create: if isOwner(request.resource.data.authorId);
        // Users can only update or delete their own posts.
        allow update, delete: if isOwner(resource.data.authorId);

        match /comments/{commentId} {
            allow read: if request.auth != null;
            allow create: if request.auth != null;
            allow update, delete: if isOwner(resource.data.authorId);
        }
    }
    
    // Rules for user-specific sub-collections like 'bookmarks'
    match /users/{userId}/bookmarks/{bookmarkId} {
      // Only the owner can manage their own bookmarks.
      allow read, write, delete: if isOwner(userId);
    }
  }
}
