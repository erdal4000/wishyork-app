rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth.uid != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isFollower(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)/followers/$(request.auth.uid));
    }

    // --- COLLECTION GROUP & BROAD READ RULES ---

    match /{path=**}/posts/{postId} {
      allow list, get: if isSignedIn();
      allow create: if isOwner(request.resource.data.authorId);
      allow update, delete: if isOwner(resource.data.authorId);
    }

    // --- DIRECT DOCUMENT RULES ---

    match /users/{userId} {
      allow list, get: if isSignedIn();
      allow create, delete: if isOwner(userId);
      allow update: if isOwner(userId) || 
                     (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys()
                        .hasAll(['followers', 'followersCount'])) ||
                     (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys()
                        .hasAll(['following', 'followingCount']));
    }

    match /usernames/{username} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.uid);
      allow delete: if isSignedIn();
    }

    match /wishlists/{wishlistId} {
      allow list: if isSignedIn();
      allow get: if resource.data.privacy == 'public' || isOwner(resource.data.authorId) || (resource.data.privacy == 'friends' && isFollower(resource.data.authorId));
      allow create: if isOwner(request.resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);
      // Allow updates by owner, or allow updates to only counter fields by any signed-in user.
      allow update: if isOwner(resource.data.authorId) ||
                     (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['unitsFulfilled', 'totalUnits', 'progress', 'itemCount', 'likes', 'likedBy', 'commentCount']));
    }

    // --- SUB-COLLECTION RULES for direct access ---

    match /users/{userId}/bookmarks/{bookmarkId} {
        allow read, create, delete: if isOwner(userId);
    }

    match /wishlists/{wishlistId}/items/{itemId} {
      allow read: if isSignedIn();
      allow create, delete: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
      // Allow updates by the owner OR if a user is just changing the status/reservedBy fields.
      allow update: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId) ||
                 (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'reservedBy']));
    }

    match /wishlists/{wishlistId}/comments/{commentId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.authorId);
    }

    match /posts/{postId}/comments/{commentId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.authorId);
    }
  }
}
