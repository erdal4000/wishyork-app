
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Rules for user profiles
    match /users/{userId} {
      allow read;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if isOwner(userId);
    }

    // Rules for usernames (to ensure uniqueness)
    match /usernames/{username} {
      allow read;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }

    // Rules for wishlists
    match /wishlists/{wishlistId} {
      allow read: if resource.data.privacy == 'public' || (request.auth != null && resource.data.authorId == request.auth.uid);
      allow create: if isOwner(request.resource.data.authorId);
      allow update: if isOwner(resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);
    }
    
    // Rules for items within a wishlist
    match /wishlists/{wishlistId}/items/{itemId} {
      // Anyone can read items of a public list, or if they are the owner
      allow read: if get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public' || isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);

      // Only the list owner can create items
      allow create: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
      
      // Only the list owner can delete items
      allow delete: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
      
      // Update rules:
      // 1. The owner can always update their own items.
      allow update: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
      
      // 2. A logged-in user can update an item in a public list IF they are only changing the 'status' field to 'fulfilled'.
      allow update: if request.auth != null &&
                      get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public' &&
                      request.resource.data.status == 'fulfilled' &&
                      resource.data.status == 'available' &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'reservedById', 'reservedBy']);
    }

    // Rules for posts
    match /posts/{postId} {
      allow read;
      allow create: if isOwner(request.resource.data.authorId);
      allow update: if isOwner(resource.data.authorId); // e.g. for editing
      allow delete: if isOwner(resource.data.authorId);

      // Anyone can add/remove themselves from 'likedBy' array
      allow update: if request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'likes']);
    }
    
    // Rules for comments
    match /{collection}/{docId}/comments/{commentId} {
      allow read;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.authorId == request.auth.uid;

      // Anyone can add/remove themselves from 'likedBy' array
      allow update: if request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'likes']);
    }

     // Rules for bookmarks
    match /users/{userId}/bookmarks/{bookmarkId} {
      allow read, write: if isOwner(userId);
    }
  }
}

    