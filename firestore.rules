rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isPublic(doc) {
      return doc.data.privacy == 'public';
    }

    // --- Collections ---
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list, create, update: if isOwner(userId);
    }

    match /usernames/{username} {
      allow get: if isSignedIn();
      allow create: if isSignedIn();
    }

    // --- Collection Groups ---
    match /{path=**}/wishlists/{wishlistId} {
      allow list: if isSignedIn();
      allow get: if isPublic(resource) || isOwner(resource.data.authorId);
      allow create: if isOwner(request.resource.data.authorId);
      
      allow update: if isOwner(resource.data.authorId) || 
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'commentCount', 'saves', 'likedBy']));
      allow delete: if isOwner(resource.data.authorId);
      
      // DÜZELTİLDİ: Bu alt koleksiyon kuralı, /users/{uid}/wishlists/{id}/items gibi
      // herhangi bir yoldaki 'items' koleksiyonunu hedefler.
      match /items/{itemId} {
        // Üst wishlist belgesini 'get' ile okur ve iznini kontrol eder.
        allow read: if get(/databases/$(database)/documents/$(path[0])/$(path[1])/wishlists/$(wishlistId)).data.privacy == 'public' || isOwner(get(/databases/$(database)/documents/$(path[0])/$(path[1])/wishlists/$(wishlistId)).data.authorId);
        
        // Yazma işlemleri için sadece wishlist sahibine izin verilir.
        allow write: if isOwner(get(/databases/$(database)/documents/$(path[0])/$(path[1])/wishlists/$(wishlistId)).data.authorId);
      }
    }

    match /{path=**}/posts/{postId} {
      allow list: if isSignedIn();
      allow get: if isPublic(resource) || isOwner(resource.data.authorId);
      allow create: if isOwner(request.resource.data.authorId);
      allow update, delete: if isOwner(resource.data.authorId);
    }

    // Yorumlar için genel kural
    match /{collection}/{docId}/comments/{commentId} {
      allow read, list, create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.authorId);
    }
  }
}