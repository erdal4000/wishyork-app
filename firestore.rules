rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function
    function isAuthenticated() {
      return request.auth != null;
    }

    // usernames collection: ensures uniqueness
    match /usernames/{username} {
      allow read;
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && resource.data.uid == request.auth.uid;
    }

    // users collection
    match /users/{userId} {
      allow read;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    // wishlists collection
    match /wishlists/{wishlistId} {
      // Allow read access if the wishlist is public, or if the user is the author.
      // This is crucial for the Storage rule to be able to check authorship.
      allow read: if resource.data.privacy == 'public' || (isAuthenticated() && resource.data.authorId == request.auth.uid);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.authorId;
      allow update, delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;

      // items subcollection
      match /items/{itemId} {
        allow read;
        allow create: if isAuthenticated() && get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId == request.auth.uid;
        allow update, delete: if isAuthenticated() && get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId == request.auth.uid;
      }

      // comments subcollection
      match /comments/{commentId} {
        allow read;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && (resource.data.authorId == request.auth.uid || get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId == request.auth.uid);
      }
    }

    // posts collection
    match /posts/{postId} {
      allow read;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.authorId;
      allow update, delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;

       // comments subcollection within posts
      match /comments/{commentId} {
        allow read;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && (resource.data.authorId == request.auth.uid || get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid);
      }
    }
  }
}
