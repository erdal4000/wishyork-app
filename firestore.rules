rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isPublic(wishlistId) {
      return get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public';
    }

    match /users/{userId} {
      allow read: if true;
      
      // Allow a user to update their own document for any field except counts
      allow update: if isOwner(userId) && 
                      !('followersCount' in request.resource.data.diff(resource.data).affectedKeys()) &&
                      !('followingCount' in request.resource.data.diff(resource.data).affectedKeys());

      // Allow a user to update ANOTHER user's document ONLY to modify the 'followers' array and 'followersCount'
      allow update: if request.auth != null && !isOwner(userId) &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers', 'followersCount']);
    }

    match /usernames/{username} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }

    match /wishlists/{wishlistId} {
      allow create: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
      allow delete: if isOwner(resource.data.authorId);
      
      allow get: if isOwner(resource.data.authorId) || resource.data.privacy == 'public' || (resource.data.privacy == 'friends' && request.auth != null);
      
      allow list: if (request.query.limit <= 20 && ('authorId' in request.query.keys() ? request.auth.uid == request.query.authorId : false)) || (request.query.privacy == 'public');

      allow update: if isOwner(resource.data.authorId);
      
      match /items/{itemId} {
        allow read: if true;
        allow create, delete: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
        
        allow update: if request.auth != null;
      }
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow delete: if request.auth != null && (isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId));
        allow update: if request.auth != null && isOwner(resource.data.authorId);
      }
    }
    
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null && isOwner(request.resource.data.authorId);
      allow update, delete: if request.auth != null && isOwner(resource.data.authorId);
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow delete: if request.auth != null && (isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/posts/$(postId)).data.authorId));
        allow update: if request.auth != null && isOwner(resource.data.authorId);
      }
    }
  }
}
