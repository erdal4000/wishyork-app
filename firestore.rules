rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---

    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isFollower(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)/followers/$(request.auth.uid));
    }
    
    function isUpdatingAllowedWishlistCounters() {
      let allowedKeys = ['unitsFulfilled', 'progress', 'itemCount', 'totalUnits', 'likes', 'commentCount', 'saves'];
      return isSignedIn() && request.resource.data.keys().hasOnly(allowedKeys);
    }
    
    function isReservationUpdate() {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'reservedBy']);
    }

    // --- COLLECTION GROUP & BROAD READ RULES ---

    match /{path=**}/posts/{postId} {
      allow list, get: if isSignedIn();
      allow create: if isOwner(request.resource.data.authorId);
      allow update, delete: if isOwner(resource.data.authorId);
    }
    
    // --- DIRECT DOCUMENT RULES ---
    
    match /users/{userId} {
      allow list, get: if isSignedIn();
      allow create, delete: if isOwner(userId);
      allow update: if isOwner(userId) || 
                     (isSignedIn() && 
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasAll(['followers', 'followersCount'])) ||
                     (isSignedIn() && 
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasAll(['following', 'followingCount']));
    }

    match /usernames/{username} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.uid);
      allow delete: if isSignedIn(); // Deletion is handled by a batch write in profile update.
    }
    
    match /wishlists/{wishlistId} {
      allow list: if isSignedIn(); // 'list' queries are filtered on the client-side.
      allow get: if resource.data.privacy == 'public' || 
                    isOwner(resource.data.authorId) ||
                    (resource.data.privacy == 'friends' && isFollower(resource.data.authorId));

      allow create: if isOwner(request.resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);

      // A user can update a wishlist if:
      // 1. They are the owner.
      // OR
      // 2. They are signed in AND they are only changing the allowed counter fields
      //    (e.g., as part of marking an item purchased).
      allow update: if isOwner(resource.data.authorId) || isUpdatingAllowedWishlistCounters();
    }
    
    // --- SUB-COLLECTION RULES for direct access ---

    match /users/{userId}/bookmarks/{bookmarkId} {
        allow read, write: if isOwner(userId);
    }
    
    match /wishlists/{wishlistId}/items/{itemId} {
      allow read: if isSignedIn();
      allow create, delete: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
      // Allow update if user is the owner OR if they are just reserving/unreserving the item.
      allow update: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId) || 
                       (isSignedIn() && isReservationUpdate());
    }

    match /posts/{postId}/comments/{commentId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.authorId);
    }

    match /wishlists/{wishlistId}/comments/{commentId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.authorId);
    }
    
    match /users/{userId}/followers/{followerId} {
        allow read, write: if isOwner(userId) || isOwner(followerId);
    }
  }
}
