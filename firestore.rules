
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user ID matches the author ID of a resource
    function isOwner(resource) {
      return request.auth.uid == resource.data.authorId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read;
      // Only the user themselves can create or update their own profile
      allow write: if isSignedIn() && request.auth.uid == userId;
    }
    
    // Rules for the 'usernames' collection
    match /usernames/{username} {
        // Anyone can read to check if a username exists
        allow read;
        // Only an authenticated user can create their own username document
        allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    // Rules for the 'posts' collection
    match /posts/{postId} {
        // Anyone can read public posts
        allow read;
        // Users can only create/update/delete their own posts
        allow write: if isSignedIn() && isOwner(resource);
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
    }

    // Rules for the 'wishlists' collection and its items subcollection
    match /wishlists/{wishlistId} {
      // Read access logic:
      // 1. Anyone can read a 'public' wishlist.
      // 2. Logged-in users can read 'friends' wishlists (future-proofing).
      // 3. The owner can always read their own wishlist, regardless of privacy.
      allow read: if resource.data.privacy == 'public' 
                  || (isSignedIn() && resource.data.privacy == 'friends') 
                  || (isSignedIn() && isOwner(resource));

      // Create access logic:
      // A user must be signed in, and the new wishlist's authorId must be their own UID.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // Update/Delete access logic:
      // A user must be the owner of the wishlist to update or delete it.
      allow update, delete: if isSignedIn() && isOwner(resource);

      // Rules for the 'items' subcollection within a wishlist
      match /items/{itemId} {
        // Anyone who can read the parent wishlist can also read its items.
        allow read: if get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public'
                    || (isSignedIn() && isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId))))
                    || (isSignedIn() && get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'friends');
        
        // Write access (create, update, delete) for items:
        // Only the owner of the parent wishlist can add, update, or remove items.
        allow write: if isSignedIn() && isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)));
      }
    }
  }
}
