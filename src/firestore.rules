rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the requesting user is following the author of the resource
    function isFollowing(authorId) {
      return exists(/databases/$(database)/documents/users/$(authorId)/followers/$(request.auth.uid));
    }
    
    // Checks if the user's data is being accessed by its owner or a follower
    function isOwnerOrFollower(userId) {
      return isOwner(userId) || isFollowing(userId);
    }
    
    // Checks if only specific fields are being updated
    function isUpdatingOnly(fields) {
      return request.resource.data.keys().hasAll(fields) && request.resource.data.keys().size() == fields.size();
    }


    // --- USERS Collection ---
    // User profiles can be read by anyone.
    // A user can only write to their own document.
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId);
      
      // Followers subcollection can be read by anyone to check follow status,
      // but only the follower themselves can add/remove their own follow record.
      match /followers/{followerId} {
        allow read: if true;
        allow write: if isOwner(followerId);
      }
    }

    // --- USERNAMES Collection ---
    // Used to enforce unique usernames.
    // Anyone can read (to check for uniqueness).
    // Only signed-in users can create a username document (on signup).
    // No one can update or delete, except through a transaction managed by secure backend logic.
    match /usernames/{username} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // Deletions handled by secure logic (e.g. cloud function)
    }

    // --- WISHLISTS Collection Group ---
    match /wishlists/{wishlistId} {

      // LIST (for queries/search)
      // Allow signed-in users to query for any public wishlists.
      // This is crucial for the Explore page and Global Search.
      allow list: if isSignedIn() && resource.data.privacy == 'public';

      // GET (for direct document reads)
      // Allow reading a wishlist if:
      // 1. It's public.
      // 2. The user is the owner (can see their own private/friends lists).
      // 3. The list is for friends, and the user is a follower of the author.
      allow get: if resource.data.privacy == 'public' 
                  || isOwner(resource.data.authorId)
                  || (resource.data.privacy == 'friends' && isFollowing(resource.data.authorId));

      // CREATE
      // A user must be signed in to create a wishlist.
      allow create: if isSignedIn() && isOwner(resource.data.authorId);

      // UPDATE
      // Allow updating a wishlist if:
      // 1. The user is the owner (can change anything).
      // 2. The user is signed in and is only updating counter fields like likes, comments, or saves.
      //    This allows other users to interact (like, bookmark) without being the owner.
      allow update: if isOwner(resource.data.authorId) || 
                     (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'commentCount', 'saves', 'likedBy', 'unitsFulfilled', 'progress', 'totalUnits', 'itemCount']));

      // DELETE
      // Only the owner can delete their wishlist.
      allow delete: if isOwner(resource.data.authorId);

      // --- ITEMS Subcollection ---
      match /items/{itemId} {
        // Allow reading/listing items if the user has permission to read the parent wishlist.
        allow read: if get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public'
                      || isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId)
                      || (get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'friends' && isFollowing(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId));

        // Allow creating/deleting items only if the user owns the parent wishlist.
        allow create, delete: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
        
        // Allow updating an item if:
        // 1. The user is the owner (can change anything).
        // 2. A signed-in user is only changing the 'status' and 'reservedBy' fields (for reserving/fulfilling).
        allow update: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId) ||
                       (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'reservedBy']));
      }
      
      // --- COMMENTS Subcollection ---
      match /comments/{commentId} {
        allow read: if true; // Comments are public within the context of a visible post/wishlist
        allow create: if isSignedIn();
        allow delete: if isOwner(resource.data.authorId);
        // Allow liking a comment
        allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']);
      }
    }

    // --- POSTS Collection Group ---
    match /posts/{postId} {
      allow read: if true; // Posts are considered public
      allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);
      // Allow liking/commenting on a post
      allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'commentCount', 'likedBy']);
      
       // --- COMMENTS Subcollection for Posts ---
      match /comments/{commentId} {
        allow read: if true; 
        allow create: if isSignedIn();
        allow delete: if isOwner(resource.data.authorId);
        allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']);
      }
    }
  }
}
