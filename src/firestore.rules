
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'users' and 'usernames' collections
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Bookmarks subcollection
      match /bookmarks/{bookmarkId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    match /usernames/{username} {
      allow read: if true;
      allow create, update: if request.auth != null && request.resource.data.uid == request.auth.uid;
    }

    // Rules for the 'wishlists' collection (main document)
    match /wishlists/{wishlistId} {
      allow read: if resource.data.privacy == 'public' || (request.auth != null && resource.data.authorId == request.auth.uid);
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId == request.auth.uid;
    }

    // Rules for the 'items' subcollection
    match /wishlists/{wishlistId}/items/{itemId} {
      allow read: if get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public' || (request.auth != null && get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId == request.auth.uid);
      allow create: if request.auth != null && get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId == request.auth.uid;
      allow delete: if request.auth != null && get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId == request.auth.uid;
      
      // A visitor can update an item if it's in a public list.
      // An owner can always update their own items.
      // Added field validation to prevent malicious updates as per the expert recommendation.
      allow update: if request.auth != null &&
                       (get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId == request.auth.uid ||
                        get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public') &&
                       (
                         // Allow owner to change anything
                         get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId == request.auth.uid ||
                         // Allow visitor to only change reservation/fulfillment status
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'reservedBy', 'reservedById'])
                       );
    }
    
    // Rules for comments on both posts and wishlists
    match /{collectionType}/{docId}/comments/{commentId} {
      // Anyone can read comments
      allow read: if true;
      
      // Only logged-in users can create comments
      allow create: if request.auth != null;
      
      // Only the author of the comment can update or delete it
      allow update, delete: if request.auth != null && resource.data.authorId == request.auth.uid;
    }

    // Rules for the 'posts' collection
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.authorId == request.auth.uid;
    }
  }
}
