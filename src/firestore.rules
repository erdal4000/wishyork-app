rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isPublic(wishlistId) {
      return get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.privacy == 'public';
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId);
    }
    
    // Rules for 'usernames' collection
    match /usernames/{username} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow delete: if isOwner(resource.data.uid);
    }

    // Rules for 'posts' collection
    match /posts/{postId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      allow create: if isOwner(request.resource.data.authorId);
      allow update: if isOwner(resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if isOwner(resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/posts/$(postId)).data.authorId);
      }
    }

    // Rules for 'wishlists' collection
    match /wishlists/{wishlistId} {
      // GET (Single Document Read)
      allow get: if request.auth != null && (isOwner(resource.data.authorId) || resource.data.privacy == 'public');
      
      // LIST (Multiple Document Read)
      allow list: if request.auth != null && (request.query.limit <= 30) &&
                   ('authorId' in request.query.keys() || 'privacy' in request.query.keys());

      allow create: if isOwner(request.resource.data.authorId);
      allow update: if isOwner(resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);

      // Items subcollection
      match /items/{itemId} {
        allow read: if request.auth != null && (
          isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId) || 
          isPublic(wishlistId)
        );
        
        allow create: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
        
        allow update: if request.auth != null && (
            isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId) ||
            isPublic(wishlistId)
        );

        allow delete: if isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
      }

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if isOwner(resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
      }
    }
  }
}
