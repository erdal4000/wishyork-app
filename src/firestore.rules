
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isFollowing(profileUserId) {
      return profileUserId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following;
    }

    // --- Collections ---

    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if !isSignedIn() || isOwner(userId);
      allow update: if isOwner(userId);

      match /bookmarks/{bookmarkId} {
        allow read, write: if isOwner(userId);
      }
    }

    match /usernames/{username} {
      allow get: if isSignedIn();
      allow create: if isSignedIn();
    }
    
    // Using collectionGroup to apply rules to all 'wishlists' collections
    match /{path=**}/wishlists/{wishlistId} {
      
      // READ Rules: Who can see what?
      allow get: if resource.data.privacy == 'public' 
                  || isOwner(resource.data.authorId) 
                  || (resource.data.privacy == 'friends' && isFollowing(resource.data.authorId));

      allow list: if isSignedIn();

      // WRITE Rules: Who can change what?
      allow create: if isOwner(request.resource.data.authorId);

      allow update: if isOwner(resource.data.authorId) || 
                     (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'commentCount', 'saves', 'progress', 'unitsFulfilled', 'totalUnits', 'itemCount']));

      allow delete: if isOwner(resource.data.authorId);
      
      // ITEMS Sub-collection
      match /items/{itemId} {
        // Anyone who can see the wishlist can see its items.
        allow read: if get( /databases/$(database)/documents/wishlists/$(wishlistId) ).data.privacy == 'public' 
                    || isOwner(get( /databases/$(database)/documents/wishlists/$(wishlistId) ).data.authorId)
                    || (get( /databases/$(database)/documents/wishlists/$(wishlistId) ).data.privacy == 'friends' && isFollowing(get( /databases/$(database)/documents/wishlists/$(wishlistId) ).data.authorId));

        allow create, delete: if isOwner(get( /databases/$(database)/documents/wishlists/$(wishlistId) ).data.authorId);

        // Owner can change anything. Others can only reserve/un-reserve.
        allow update: if isOwner(get( /databases/$(database)/documents/wishlists/$(wishlistId) ).data.authorId) ||
                       (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'reservedBy']));
      }

      // COMMENTS Sub-collection
      match /comments/{commentId} {
          allow read: if isSignedIn();
          allow create: if isSignedIn();
          allow update: if isOwner(request.resource.data.authorId);
          allow delete: if isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId);
      }
    }

    // Using collectionGroup for 'posts' as well
    match /{path=**}/posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.authorId);
      allow update, delete: if isOwner(resource.data.authorId);
      
      // COMMENTS Sub-collection
      match /comments/{commentId} {
          allow read: if isSignedIn();
          allow create: if isSignedIn();
          allow update: if isOwner(request.resource.data.authorId);
          allow delete: if isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/posts/$(postId)).data.authorId);
      }
    }
  }
}
