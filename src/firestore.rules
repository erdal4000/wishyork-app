rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions (none for now to keep it simple)

    // USER-RELATED RULES
    match /users/{userId} {
      // A user can read and update their own profile.
      // Nobody else can read or write to other user profiles.
      allow read, update: if request.auth != null && request.auth.uid == userId;

      // Anyone can create a user document during signup.
      allow create: if request.auth != null;
    }

    match /usernames/{username} {
      // Anyone can read to check for username availability.
      allow read;
      // Only the associated user can create/delete their username document.
      allow create, delete: if request.auth != null && request.auth.uid == request.resource.data.uid;
    }

    // CONTENT-RELATED RULES

    match /wishlists/{wishlistId} {
      // A user can only read their own wishlists. Public visibility is temporarily disabled.
      allow read: if request.auth != null && request.auth.uid == resource.data.authorId;

      // A user can only create a wishlist for themselves.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
      
      // A user can only update or delete their own wishlists.
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;

      // Rules for items subcollection
      match /items/{itemId} {
        // Owner can do anything.
        allow read, write, delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/wishlists/$(wishlistId)).data.authorId;
        
        // Logged-in users can update items on public lists (for reserving/fulfilling).
        // This is simplified for now.
        allow update: if request.auth != null;
      }
      
      // Rules for comments subcollection
       match /comments/{commentId} {
          // Any logged-in user can read comments.
          allow read: if request.auth != null;
          // Users can only create/delete their own comments.
          allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
          allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
          // Liking a comment (simplified).
          allow update: if request.auth != null;
       }
    }
    
    match /posts/{postId} {
        // Any logged-in user can read posts.
        allow read: if request.auth != null;
        // Users can only create/update/delete their own posts.
        allow create, update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
        
        // Rules for comments on posts
        match /comments/{commentId} {
          allow read: if request.auth != null;
          allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
          allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
          allow update: if request.auth != null;
       }
    }
  }
}
